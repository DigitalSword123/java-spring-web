package com.springboot.firstwebapp.todo;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
//import org.springframework.security.core.Authentication;
//import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttributes;

import jakarta.validation.Valid;

//@Controller
@SessionAttributes("name")
public class TodoController {
	
	public TodoController(TodoService todoService) {
		super();
		this.todoService = todoService;
	}

	private TodoService todoService;
	
	   // This means to get the bean called userRepository
      // Which is auto-generated by Spring, we will use it to handle the data
	
		
	
	@RequestMapping("list-todos")
	public String listAllTodos(ModelMap model) {
//		String username = getLoggedInUsername(model);
//		List<Todo> todos = todoService.findByUsername(username);
//		List<Todo> todos = todoService.findByUsername("in28minutes");
		
		String  username = getLoggedInUsername(model);
		List<Todo> todos = todoService.findByUsername(username);
		
		
		System.out.println(todos);
		model.addAttribute("todos", todos);
		
//		this return statement will return listTodos .jsp file
		return "listTodos";
	}

	private String getLoggedInUsername(ModelMap model) {
		return (String)model.get("name");
	}

	//GET, POST
	@RequestMapping(value="add-todo", method = RequestMethod.GET)
	public String showNewTodoPage(ModelMap model) {
		String username=getLoggedInUsername(model);
		Todo todo = new Todo(0, username, "", LocalDate.now().plusYears(1), false);
		model.put("todo", todo);
		return "todo";
	}

//	@RequestMapping(value="add-todo", method = RequestMethod.POST)
//	public String addNewTodo(@RequestParam String description, ModelMap model) {
//
//		String username=(String)model.get("name");
//
//		todoService.addTodo(username, description, 
//				LocalDate.now().plusYears(1), false);
//		return "redirect:list-todos";
//	}

	
	@RequestMapping(value="add-todo", method = RequestMethod.POST)
	public String addNewTodo(ModelMap model,@Valid Todo todo, BindingResult result) {

		if(result.hasErrors()) {
			return "todo";
		}
		String username=getLoggedInUsername(model);
		
		todo.setUsername(username);

//		todoService.addTodo(username, todo.getDescription(), 
//				LocalDate.now().plusYears(1), false);
		
//		todoService.addTodo(username, todo.getDescription(), 
//				todo.getTargetDate(), false);
		
		return "redirect:list-todos";
	}
	
	@RequestMapping("delete-todo")
	public String deleteTodo(@RequestParam int id) {
		//Delete todo
		todoService.deleteById(id);
		return "redirect:list-todos";
		
	}

	@RequestMapping(value="update-todo", method = RequestMethod.GET)
	public String showUpdateTodoPage(@RequestParam int id, ModelMap model) {
		
		Todo todo = todoService.findById(id);
		model.addAttribute("todo", todo);
		return "todo";
	}

	@RequestMapping(value="update-todo", method = RequestMethod.POST)
	public String updateTodo(ModelMap model, @Valid Todo todo, BindingResult result) {
		
		if(result.hasErrors()) {
			return "todo";
		}
		
		String username=getLoggedInUsername(model);
		todo.setUsername(username);
		
//		business logic without database
		todoService.updateTodo(todo);
		return "redirect:list-todos";
	}
//
//	private String getLoggedInUsername(ModelMap model) {
//		Authentication authentication = 
//				SecurityContextHolder.getContext().getAuthentication();
//		return authentication.getName();
//	}

}